; Use the gtsocket-setup script to create a config specific for your setup.
; This is the default config. It will be overridden with the config in ~/.gtsocket/config.ini

[general]
; BCM numbers of those pins you used to connect the 433Mhz receiver and sender
receiving_GPIO_pin = 5
sending_GPIO_pin = 6

; max difference (in %) of measured signal length (how long off or on) to lengths specified in encoding to be recognized as such
max_signal_difference=20
; min length of signal sequence to be considered a command sent by the remote
sequence_min_length=10

; when sending a command, how often to sent each signal sequence - encoding combination (the remote sends it 4 times)
sequence_repetitions=4

; you can specify as many different encodings as you want, my remote uses two different encodings
; positive values mean X microsec ON, negatives mean X microsec OFF, i.e. 300 = 300 microsec on (receiving a signal on 433Mhz), -2400 = 2400 microsec. off (not receiving any signal)
; the remote first sends an init sequence of two signals, then a start sequence, then the data sequence, followed by the end sequence, all this is repeated <sequence_repetitions> number of times
; binary data (1 and 0) is encoded as two signals (one on, one off) per bit
; the remote sends each data sequence (init, start, data, end) <sequence_repetitions> number of times in encoding 0, then the same number of times in encoding 1 and then the next data sequence in encoding 0 and 1 and so on
; please use gtsocket_raw_signals.py to discover your values for encodings, signal sequences and data sequences (see HOWTO)
[encoding:1]
init=300,-2400
1=1000,-500
0=300,-1200

[encoding:2]
init=2900,-7200
1=900,-600
0=400,-1100

; a group of socket which shares the same encodings and start_data (meaning they are switched by the same remote)
[group:1]
encodings=1,2
; the remote uses the same start sequence for all sockets (buttons on the remote)
start_data=1110

[socket:A]
group=1
on_command_data=1101111110100110,0111001011010001,1100011110010101,1001101101011010
off_command_data=0100001101100010,0001000000101000,1011111011101011,0000100100000111
end_data=1100

[socket:B]
group=1
on_command_data=1110010111111111,1010100000011110,1111000110110000,1000101000110011
off_command_data=0101010010000100,0010011001111100,0110110011001001,0011110101001101
end_data=0101

; C on has the same data sequences as A off, the socket seams to distinguish those only by the end sequence
; only combinations of data sequence and end sequence are unique for a given socket
[socket:C]
group=1
on_command_data=socket:A|off_command_data
off_command_data=socket:A|on_command_data
end_data=1110

[socket:D]
group=1
on_command_data=socket:B|off_command_data
off_command_data=socket:B|on_command_data
end_data=0111

[socket:all]
group=1
on_command_data=socket:A|off_command_data
off_command_data=socket:A|on_command_data
end_data=0010


